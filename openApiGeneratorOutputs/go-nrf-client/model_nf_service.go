/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the NFService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NFService{}

// NFService struct for NFService
type NFService struct {
	ServiceInstanceId string `json:"serviceInstanceId"`
	ServiceName ServiceName `json:"serviceName"`
	Versions []NFServiceVersion `json:"versions"`
	Scheme UriScheme `json:"scheme"`
	NfServiceStatus NFServiceStatus `json:"nfServiceStatus"`
	Fqdn *string `json:"fqdn,omitempty"`
	InterPlmnFqdn *string `json:"interPlmnFqdn,omitempty"`
	IpEndPoints []IpEndPoint `json:"ipEndPoints,omitempty"`
	ApiPrefix *string `json:"apiPrefix,omitempty"`
	DefaultNotificationSubscriptions []DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`
	AllowedPlmns []PlmnId `json:"allowedPlmns,omitempty"`
	AllowedNfTypes []NFType `json:"allowedNfTypes,omitempty"`
	AllowedNfDomains []string `json:"allowedNfDomains,omitempty"`
	AllowedNssais []Snssai `json:"allowedNssais,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	Capacity *int32 `json:"capacity,omitempty"`
	Load *int32 `json:"load,omitempty"`
	RecoveryTime *time.Time `json:"recoveryTime,omitempty"`
	ChfServiceInfo *ChfServiceInfo `json:"chfServiceInfo,omitempty"`
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
}

type _NFService NFService

// NewNFService instantiates a new NFService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFService(serviceInstanceId string, serviceName ServiceName, versions []NFServiceVersion, scheme UriScheme, nfServiceStatus NFServiceStatus) *NFService {
	this := NFService{}
	this.ServiceInstanceId = serviceInstanceId
	this.ServiceName = serviceName
	this.Versions = versions
	this.Scheme = scheme
	this.NfServiceStatus = nfServiceStatus
	return &this
}

// NewNFServiceWithDefaults instantiates a new NFService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFServiceWithDefaults() *NFService {
	this := NFService{}
	return &this
}

// GetServiceInstanceId returns the ServiceInstanceId field value
func (o *NFService) GetServiceInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceInstanceId
}

// GetServiceInstanceIdOk returns a tuple with the ServiceInstanceId field value
// and a boolean to check if the value has been set.
func (o *NFService) GetServiceInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceInstanceId, true
}

// SetServiceInstanceId sets field value
func (o *NFService) SetServiceInstanceId(v string) {
	o.ServiceInstanceId = v
}

// GetServiceName returns the ServiceName field value
func (o *NFService) GetServiceName() ServiceName {
	if o == nil {
		var ret ServiceName
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *NFService) GetServiceNameOk() (*ServiceName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *NFService) SetServiceName(v ServiceName) {
	o.ServiceName = v
}

// GetVersions returns the Versions field value
func (o *NFService) GetVersions() []NFServiceVersion {
	if o == nil {
		var ret []NFServiceVersion
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *NFService) GetVersionsOk() ([]NFServiceVersion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *NFService) SetVersions(v []NFServiceVersion) {
	o.Versions = v
}

// GetScheme returns the Scheme field value
func (o *NFService) GetScheme() UriScheme {
	if o == nil {
		var ret UriScheme
		return ret
	}

	return o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value
// and a boolean to check if the value has been set.
func (o *NFService) GetSchemeOk() (*UriScheme, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scheme, true
}

// SetScheme sets field value
func (o *NFService) SetScheme(v UriScheme) {
	o.Scheme = v
}

// GetNfServiceStatus returns the NfServiceStatus field value
func (o *NFService) GetNfServiceStatus() NFServiceStatus {
	if o == nil {
		var ret NFServiceStatus
		return ret
	}

	return o.NfServiceStatus
}

// GetNfServiceStatusOk returns a tuple with the NfServiceStatus field value
// and a boolean to check if the value has been set.
func (o *NFService) GetNfServiceStatusOk() (*NFServiceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfServiceStatus, true
}

// SetNfServiceStatus sets field value
func (o *NFService) SetNfServiceStatus(v NFServiceStatus) {
	o.NfServiceStatus = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *NFService) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *NFService) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *NFService) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetInterPlmnFqdn returns the InterPlmnFqdn field value if set, zero value otherwise.
func (o *NFService) GetInterPlmnFqdn() string {
	if o == nil || IsNil(o.InterPlmnFqdn) {
		var ret string
		return ret
	}
	return *o.InterPlmnFqdn
}

// GetInterPlmnFqdnOk returns a tuple with the InterPlmnFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetInterPlmnFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.InterPlmnFqdn) {
		return nil, false
	}
	return o.InterPlmnFqdn, true
}

// HasInterPlmnFqdn returns a boolean if a field has been set.
func (o *NFService) HasInterPlmnFqdn() bool {
	if o != nil && !IsNil(o.InterPlmnFqdn) {
		return true
	}

	return false
}

// SetInterPlmnFqdn gets a reference to the given string and assigns it to the InterPlmnFqdn field.
func (o *NFService) SetInterPlmnFqdn(v string) {
	o.InterPlmnFqdn = &v
}

// GetIpEndPoints returns the IpEndPoints field value if set, zero value otherwise.
func (o *NFService) GetIpEndPoints() []IpEndPoint {
	if o == nil || IsNil(o.IpEndPoints) {
		var ret []IpEndPoint
		return ret
	}
	return o.IpEndPoints
}

// GetIpEndPointsOk returns a tuple with the IpEndPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetIpEndPointsOk() ([]IpEndPoint, bool) {
	if o == nil || IsNil(o.IpEndPoints) {
		return nil, false
	}
	return o.IpEndPoints, true
}

// HasIpEndPoints returns a boolean if a field has been set.
func (o *NFService) HasIpEndPoints() bool {
	if o != nil && !IsNil(o.IpEndPoints) {
		return true
	}

	return false
}

// SetIpEndPoints gets a reference to the given []IpEndPoint and assigns it to the IpEndPoints field.
func (o *NFService) SetIpEndPoints(v []IpEndPoint) {
	o.IpEndPoints = v
}

// GetApiPrefix returns the ApiPrefix field value if set, zero value otherwise.
func (o *NFService) GetApiPrefix() string {
	if o == nil || IsNil(o.ApiPrefix) {
		var ret string
		return ret
	}
	return *o.ApiPrefix
}

// GetApiPrefixOk returns a tuple with the ApiPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetApiPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.ApiPrefix) {
		return nil, false
	}
	return o.ApiPrefix, true
}

// HasApiPrefix returns a boolean if a field has been set.
func (o *NFService) HasApiPrefix() bool {
	if o != nil && !IsNil(o.ApiPrefix) {
		return true
	}

	return false
}

// SetApiPrefix gets a reference to the given string and assigns it to the ApiPrefix field.
func (o *NFService) SetApiPrefix(v string) {
	o.ApiPrefix = &v
}

// GetDefaultNotificationSubscriptions returns the DefaultNotificationSubscriptions field value if set, zero value otherwise.
func (o *NFService) GetDefaultNotificationSubscriptions() []DefaultNotificationSubscription {
	if o == nil || IsNil(o.DefaultNotificationSubscriptions) {
		var ret []DefaultNotificationSubscription
		return ret
	}
	return o.DefaultNotificationSubscriptions
}

// GetDefaultNotificationSubscriptionsOk returns a tuple with the DefaultNotificationSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetDefaultNotificationSubscriptionsOk() ([]DefaultNotificationSubscription, bool) {
	if o == nil || IsNil(o.DefaultNotificationSubscriptions) {
		return nil, false
	}
	return o.DefaultNotificationSubscriptions, true
}

// HasDefaultNotificationSubscriptions returns a boolean if a field has been set.
func (o *NFService) HasDefaultNotificationSubscriptions() bool {
	if o != nil && !IsNil(o.DefaultNotificationSubscriptions) {
		return true
	}

	return false
}

// SetDefaultNotificationSubscriptions gets a reference to the given []DefaultNotificationSubscription and assigns it to the DefaultNotificationSubscriptions field.
func (o *NFService) SetDefaultNotificationSubscriptions(v []DefaultNotificationSubscription) {
	o.DefaultNotificationSubscriptions = v
}

// GetAllowedPlmns returns the AllowedPlmns field value if set, zero value otherwise.
func (o *NFService) GetAllowedPlmns() []PlmnId {
	if o == nil || IsNil(o.AllowedPlmns) {
		var ret []PlmnId
		return ret
	}
	return o.AllowedPlmns
}

// GetAllowedPlmnsOk returns a tuple with the AllowedPlmns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetAllowedPlmnsOk() ([]PlmnId, bool) {
	if o == nil || IsNil(o.AllowedPlmns) {
		return nil, false
	}
	return o.AllowedPlmns, true
}

// HasAllowedPlmns returns a boolean if a field has been set.
func (o *NFService) HasAllowedPlmns() bool {
	if o != nil && !IsNil(o.AllowedPlmns) {
		return true
	}

	return false
}

// SetAllowedPlmns gets a reference to the given []PlmnId and assigns it to the AllowedPlmns field.
func (o *NFService) SetAllowedPlmns(v []PlmnId) {
	o.AllowedPlmns = v
}

// GetAllowedNfTypes returns the AllowedNfTypes field value if set, zero value otherwise.
func (o *NFService) GetAllowedNfTypes() []NFType {
	if o == nil || IsNil(o.AllowedNfTypes) {
		var ret []NFType
		return ret
	}
	return o.AllowedNfTypes
}

// GetAllowedNfTypesOk returns a tuple with the AllowedNfTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetAllowedNfTypesOk() ([]NFType, bool) {
	if o == nil || IsNil(o.AllowedNfTypes) {
		return nil, false
	}
	return o.AllowedNfTypes, true
}

// HasAllowedNfTypes returns a boolean if a field has been set.
func (o *NFService) HasAllowedNfTypes() bool {
	if o != nil && !IsNil(o.AllowedNfTypes) {
		return true
	}

	return false
}

// SetAllowedNfTypes gets a reference to the given []NFType and assigns it to the AllowedNfTypes field.
func (o *NFService) SetAllowedNfTypes(v []NFType) {
	o.AllowedNfTypes = v
}

// GetAllowedNfDomains returns the AllowedNfDomains field value if set, zero value otherwise.
func (o *NFService) GetAllowedNfDomains() []string {
	if o == nil || IsNil(o.AllowedNfDomains) {
		var ret []string
		return ret
	}
	return o.AllowedNfDomains
}

// GetAllowedNfDomainsOk returns a tuple with the AllowedNfDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetAllowedNfDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedNfDomains) {
		return nil, false
	}
	return o.AllowedNfDomains, true
}

// HasAllowedNfDomains returns a boolean if a field has been set.
func (o *NFService) HasAllowedNfDomains() bool {
	if o != nil && !IsNil(o.AllowedNfDomains) {
		return true
	}

	return false
}

// SetAllowedNfDomains gets a reference to the given []string and assigns it to the AllowedNfDomains field.
func (o *NFService) SetAllowedNfDomains(v []string) {
	o.AllowedNfDomains = v
}

// GetAllowedNssais returns the AllowedNssais field value if set, zero value otherwise.
func (o *NFService) GetAllowedNssais() []Snssai {
	if o == nil || IsNil(o.AllowedNssais) {
		var ret []Snssai
		return ret
	}
	return o.AllowedNssais
}

// GetAllowedNssaisOk returns a tuple with the AllowedNssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetAllowedNssaisOk() ([]Snssai, bool) {
	if o == nil || IsNil(o.AllowedNssais) {
		return nil, false
	}
	return o.AllowedNssais, true
}

// HasAllowedNssais returns a boolean if a field has been set.
func (o *NFService) HasAllowedNssais() bool {
	if o != nil && !IsNil(o.AllowedNssais) {
		return true
	}

	return false
}

// SetAllowedNssais gets a reference to the given []Snssai and assigns it to the AllowedNssais field.
func (o *NFService) SetAllowedNssais(v []Snssai) {
	o.AllowedNssais = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *NFService) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *NFService) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *NFService) SetPriority(v int32) {
	o.Priority = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *NFService) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *NFService) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *NFService) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetLoad returns the Load field value if set, zero value otherwise.
func (o *NFService) GetLoad() int32 {
	if o == nil || IsNil(o.Load) {
		var ret int32
		return ret
	}
	return *o.Load
}

// GetLoadOk returns a tuple with the Load field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetLoadOk() (*int32, bool) {
	if o == nil || IsNil(o.Load) {
		return nil, false
	}
	return o.Load, true
}

// HasLoad returns a boolean if a field has been set.
func (o *NFService) HasLoad() bool {
	if o != nil && !IsNil(o.Load) {
		return true
	}

	return false
}

// SetLoad gets a reference to the given int32 and assigns it to the Load field.
func (o *NFService) SetLoad(v int32) {
	o.Load = &v
}

// GetRecoveryTime returns the RecoveryTime field value if set, zero value otherwise.
func (o *NFService) GetRecoveryTime() time.Time {
	if o == nil || IsNil(o.RecoveryTime) {
		var ret time.Time
		return ret
	}
	return *o.RecoveryTime
}

// GetRecoveryTimeOk returns a tuple with the RecoveryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetRecoveryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecoveryTime) {
		return nil, false
	}
	return o.RecoveryTime, true
}

// HasRecoveryTime returns a boolean if a field has been set.
func (o *NFService) HasRecoveryTime() bool {
	if o != nil && !IsNil(o.RecoveryTime) {
		return true
	}

	return false
}

// SetRecoveryTime gets a reference to the given time.Time and assigns it to the RecoveryTime field.
func (o *NFService) SetRecoveryTime(v time.Time) {
	o.RecoveryTime = &v
}

// GetChfServiceInfo returns the ChfServiceInfo field value if set, zero value otherwise.
func (o *NFService) GetChfServiceInfo() ChfServiceInfo {
	if o == nil || IsNil(o.ChfServiceInfo) {
		var ret ChfServiceInfo
		return ret
	}
	return *o.ChfServiceInfo
}

// GetChfServiceInfoOk returns a tuple with the ChfServiceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetChfServiceInfoOk() (*ChfServiceInfo, bool) {
	if o == nil || IsNil(o.ChfServiceInfo) {
		return nil, false
	}
	return o.ChfServiceInfo, true
}

// HasChfServiceInfo returns a boolean if a field has been set.
func (o *NFService) HasChfServiceInfo() bool {
	if o != nil && !IsNil(o.ChfServiceInfo) {
		return true
	}

	return false
}

// SetChfServiceInfo gets a reference to the given ChfServiceInfo and assigns it to the ChfServiceInfo field.
func (o *NFService) SetChfServiceInfo(v ChfServiceInfo) {
	o.ChfServiceInfo = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *NFService) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFService) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *NFService) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *NFService) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

func (o NFService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NFService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serviceInstanceId"] = o.ServiceInstanceId
	toSerialize["serviceName"] = o.ServiceName
	toSerialize["versions"] = o.Versions
	toSerialize["scheme"] = o.Scheme
	toSerialize["nfServiceStatus"] = o.NfServiceStatus
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.InterPlmnFqdn) {
		toSerialize["interPlmnFqdn"] = o.InterPlmnFqdn
	}
	if !IsNil(o.IpEndPoints) {
		toSerialize["ipEndPoints"] = o.IpEndPoints
	}
	if !IsNil(o.ApiPrefix) {
		toSerialize["apiPrefix"] = o.ApiPrefix
	}
	if !IsNil(o.DefaultNotificationSubscriptions) {
		toSerialize["defaultNotificationSubscriptions"] = o.DefaultNotificationSubscriptions
	}
	if !IsNil(o.AllowedPlmns) {
		toSerialize["allowedPlmns"] = o.AllowedPlmns
	}
	if !IsNil(o.AllowedNfTypes) {
		toSerialize["allowedNfTypes"] = o.AllowedNfTypes
	}
	if !IsNil(o.AllowedNfDomains) {
		toSerialize["allowedNfDomains"] = o.AllowedNfDomains
	}
	if !IsNil(o.AllowedNssais) {
		toSerialize["allowedNssais"] = o.AllowedNssais
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Load) {
		toSerialize["load"] = o.Load
	}
	if !IsNil(o.RecoveryTime) {
		toSerialize["recoveryTime"] = o.RecoveryTime
	}
	if !IsNil(o.ChfServiceInfo) {
		toSerialize["chfServiceInfo"] = o.ChfServiceInfo
	}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	return toSerialize, nil
}

func (o *NFService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceInstanceId",
		"serviceName",
		"versions",
		"scheme",
		"nfServiceStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNFService := _NFService{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNFService)

	if err != nil {
		return err
	}

	*o = NFService(varNFService)

	return err
}

type NullableNFService struct {
	value *NFService
	isSet bool
}

func (v NullableNFService) Get() *NFService {
	return v.value
}

func (v *NullableNFService) Set(val *NFService) {
	v.value = val
	v.isSet = true
}

func (v NullableNFService) IsSet() bool {
	return v.isSet
}

func (v *NullableNFService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFService(val *NFService) *NullableNFService {
	return &NullableNFService{value: val, isSet: true}
}

func (v NullableNFService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



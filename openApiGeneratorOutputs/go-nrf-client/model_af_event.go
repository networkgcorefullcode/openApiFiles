/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AfEvent Represents an application's event.   Possible values are: - SVC_EXPERIENCE: Indicates that the subscribed/notified event is service experience   information for an application. - UE_MOBILITY: Indicates that the subscribed/notified event is UE mobility information. - UE_COMM: Indicates that the subscribed/notified event is UE communication information. - EXCEPTIONS: Indicates that the subscribed/notified event is exceptions information. - USER_DATA_CONGESTION: Indicates that the subscribed/notified event is user data congestion   analytics related information. - PERF_DATA: Indicates that the subscribed/notified event is performance data information. - DISPERSION: Indicates that the subscribed/notified event is dispersion information. - COLLECTIVE_BEHAVIOUR: Indicates that the subscribed/notified event is collective behaviour   information. - MS_QOE_METRICS: Indicates that the subscribed/notified event is Media Streaming QoE   metrics. - MS_CONSUMPTION: Indicates that the subscribed/notified event is Media Streaming   consumption reports. - MS_NET_ASSIST_INVOCATION: Indicates that the subscribed/notified event is Media Streaming   network assistance invocation. - MS_DYN_POLICY_INVOCATION: Indicates that the subscribed/notified event is Media Streaming   dynamic policy invocation. - MS_ACCESS_ACTIVITY: Indicates that the subscribed/notified event is Media Streaming access   activity. - GNSS_ASSISTANCE_DATA: Indicates that the subscribed/notified event is GNSS Assistance Data   Collection. - DATA_VOLUME_TRANSFER_TIME: Indicates that the event subscribed is data volume transfer   time information. - APP_ACTIVE_TIME: Indicates that the event subscribed is application activation time   information. 
type AfEvent struct {
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AfEvent) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AfEvent)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AfEvent) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAfEvent struct {
	value *AfEvent
	isSet bool
}

func (v NullableAfEvent) Get() *AfEvent {
	return v.value
}

func (v *NullableAfEvent) Set(val *AfEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAfEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAfEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfEvent(val *AfEvent) *NullableAfEvent {
	return &NullableAfEvent{value: val, isSet: true}
}

func (v NullableAfEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



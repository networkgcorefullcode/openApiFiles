/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkNodeDiameterAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkNodeDiameterAddress{}

// NetworkNodeDiameterAddress This data type is a part of smsfDiameterAddress and it should be present whenever smsf supports Diameter protocol. 
type NetworkNodeDiameterAddress struct {
	// Fully Qualified Domain Name
	Name string `json:"name"`
	// Fully Qualified Domain Name
	Realm string `json:"realm"`
}

type _NetworkNodeDiameterAddress NetworkNodeDiameterAddress

// NewNetworkNodeDiameterAddress instantiates a new NetworkNodeDiameterAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkNodeDiameterAddress(name string, realm string) *NetworkNodeDiameterAddress {
	this := NetworkNodeDiameterAddress{}
	this.Name = name
	this.Realm = realm
	return &this
}

// NewNetworkNodeDiameterAddressWithDefaults instantiates a new NetworkNodeDiameterAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkNodeDiameterAddressWithDefaults() *NetworkNodeDiameterAddress {
	this := NetworkNodeDiameterAddress{}
	return &this
}

// GetName returns the Name field value
func (o *NetworkNodeDiameterAddress) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkNodeDiameterAddress) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkNodeDiameterAddress) SetName(v string) {
	o.Name = v
}

// GetRealm returns the Realm field value
func (o *NetworkNodeDiameterAddress) GetRealm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Realm
}

// GetRealmOk returns a tuple with the Realm field value
// and a boolean to check if the value has been set.
func (o *NetworkNodeDiameterAddress) GetRealmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Realm, true
}

// SetRealm sets field value
func (o *NetworkNodeDiameterAddress) SetRealm(v string) {
	o.Realm = v
}

func (o NetworkNodeDiameterAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkNodeDiameterAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["realm"] = o.Realm
	return toSerialize, nil
}

func (o *NetworkNodeDiameterAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"realm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkNodeDiameterAddress := _NetworkNodeDiameterAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkNodeDiameterAddress)

	if err != nil {
		return err
	}

	*o = NetworkNodeDiameterAddress(varNetworkNodeDiameterAddress)

	return err
}

type NullableNetworkNodeDiameterAddress struct {
	value *NetworkNodeDiameterAddress
	isSet bool
}

func (v NullableNetworkNodeDiameterAddress) Get() *NetworkNodeDiameterAddress {
	return v.value
}

func (v *NullableNetworkNodeDiameterAddress) Set(val *NetworkNodeDiameterAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkNodeDiameterAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkNodeDiameterAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkNodeDiameterAddress(val *NetworkNodeDiameterAddress) *NullableNetworkNodeDiameterAddress {
	return &NullableNetworkNodeDiameterAddress{value: val, isSet: true}
}

func (v NullableNetworkNodeDiameterAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkNodeDiameterAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NfTypeCond type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfTypeCond{}

// NfTypeCond Subscription to a set of NFs based on their NF Type
type NfTypeCond struct {
	NfType NfType `json:"nfType"`
}

type _NfTypeCond NfTypeCond

// NewNfTypeCond instantiates a new NfTypeCond object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfTypeCond(nfType NfType) *NfTypeCond {
	this := NfTypeCond{}
	return &this
}

// NewNfTypeCondWithDefaults instantiates a new NfTypeCond object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfTypeCondWithDefaults() *NfTypeCond {
	this := NfTypeCond{}
	return &this
}

// GetNfType returns the NfType field value
func (o *NfTypeCond) GetNfType() NfType {
	if o == nil {
		var ret NfType
		return ret
	}

	return o.NfType
}

// GetNfTypeOk returns a tuple with the NfType field value
// and a boolean to check if the value has been set.
func (o *NfTypeCond) GetNfTypeOk() (*NfType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfType, true
}

// SetNfType sets field value
func (o *NfTypeCond) SetNfType(v NfType) {
	o.NfType = v
}

func (o NfTypeCond) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfTypeCond) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nfType"] = o.NfType
	return toSerialize, nil
}

func (o *NfTypeCond) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nfType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNfTypeCond := _NfTypeCond{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNfTypeCond)

	if err != nil {
		return err
	}

	*o = NfTypeCond(varNfTypeCond)

	return err
}

type NullableNfTypeCond struct {
	value *NfTypeCond
	isSet bool
}

func (v NullableNfTypeCond) Get() *NfTypeCond {
	return v.value
}

func (v *NullableNfTypeCond) Set(val *NfTypeCond) {
	v.value = val
	v.isSet = true
}

func (v NullableNfTypeCond) IsSet() bool {
	return v.isSet
}

func (v *NullableNfTypeCond) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfTypeCond(val *NfTypeCond) *NullableNfTypeCond {
	return &NullableNfTypeCond{value: val, isSet: true}
}

func (v NullableNfTypeCond) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfTypeCond) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



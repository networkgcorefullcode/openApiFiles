/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnssaiSmfInfoItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnssaiSmfInfoItem{}

// SnssaiSmfInfoItem struct for SnssaiSmfInfoItem
type SnssaiSmfInfoItem struct {
	SNssai Snssai `json:"sNssai"`
	DnnSmfInfoList []DnnSmfInfoItem `json:"dnnSmfInfoList"`
}

type _SnssaiSmfInfoItem SnssaiSmfInfoItem

// NewSnssaiSmfInfoItem instantiates a new SnssaiSmfInfoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnssaiSmfInfoItem(sNssai Snssai, dnnSmfInfoList []DnnSmfInfoItem) *SnssaiSmfInfoItem {
	this := SnssaiSmfInfoItem{}
	this.SNssai = sNssai
	this.DnnSmfInfoList = dnnSmfInfoList
	return &this
}

// NewSnssaiSmfInfoItemWithDefaults instantiates a new SnssaiSmfInfoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnssaiSmfInfoItemWithDefaults() *SnssaiSmfInfoItem {
	this := SnssaiSmfInfoItem{}
	return &this
}

// GetSNssai returns the SNssai field value
func (o *SnssaiSmfInfoItem) GetSNssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.SNssai
}

// GetSNssaiOk returns a tuple with the SNssai field value
// and a boolean to check if the value has been set.
func (o *SnssaiSmfInfoItem) GetSNssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SNssai, true
}

// SetSNssai sets field value
func (o *SnssaiSmfInfoItem) SetSNssai(v Snssai) {
	o.SNssai = v
}

// GetDnnSmfInfoList returns the DnnSmfInfoList field value
func (o *SnssaiSmfInfoItem) GetDnnSmfInfoList() []DnnSmfInfoItem {
	if o == nil {
		var ret []DnnSmfInfoItem
		return ret
	}

	return o.DnnSmfInfoList
}

// GetDnnSmfInfoListOk returns a tuple with the DnnSmfInfoList field value
// and a boolean to check if the value has been set.
func (o *SnssaiSmfInfoItem) GetDnnSmfInfoListOk() ([]DnnSmfInfoItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnnSmfInfoList, true
}

// SetDnnSmfInfoList sets field value
func (o *SnssaiSmfInfoItem) SetDnnSmfInfoList(v []DnnSmfInfoItem) {
	o.DnnSmfInfoList = v
}

func (o SnssaiSmfInfoItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnssaiSmfInfoItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sNssai"] = o.SNssai
	toSerialize["dnnSmfInfoList"] = o.DnnSmfInfoList
	return toSerialize, nil
}

func (o *SnssaiSmfInfoItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sNssai",
		"dnnSmfInfoList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnssaiSmfInfoItem := _SnssaiSmfInfoItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnssaiSmfInfoItem)

	if err != nil {
		return err
	}

	*o = SnssaiSmfInfoItem(varSnssaiSmfInfoItem)

	return err
}

type NullableSnssaiSmfInfoItem struct {
	value *SnssaiSmfInfoItem
	isSet bool
}

func (v NullableSnssaiSmfInfoItem) Get() *SnssaiSmfInfoItem {
	return v.value
}

func (v *NullableSnssaiSmfInfoItem) Set(val *SnssaiSmfInfoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSnssaiSmfInfoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSnssaiSmfInfoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnssaiSmfInfoItem(val *SnssaiSmfInfoItem) *NullableSnssaiSmfInfoItem {
	return &NullableSnssaiSmfInfoItem{value: val, isSet: true}
}

func (v NullableSnssaiSmfInfoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnssaiSmfInfoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



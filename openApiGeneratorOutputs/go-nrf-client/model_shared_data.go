/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SharedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedData{}

// SharedData Shared Data
type SharedData struct {
	SharedDataId string `json:"sharedDataId"`
	SharedProfileData NullableNFProfile `json:"sharedProfileData,omitempty"`
	SharedServiceData *NFService `json:"sharedServiceData,omitempty"`
	AuthorizedWriteScope *SharedScope `json:"authorizedWriteScope,omitempty"`
}

type _SharedData SharedData

// NewSharedData instantiates a new SharedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedData(sharedDataId string) *SharedData {
	this := SharedData{}
	this.SharedDataId = sharedDataId
	return &this
}

// NewSharedDataWithDefaults instantiates a new SharedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDataWithDefaults() *SharedData {
	this := SharedData{}
	return &this
}

// GetSharedDataId returns the SharedDataId field value
func (o *SharedData) GetSharedDataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SharedDataId
}

// GetSharedDataIdOk returns a tuple with the SharedDataId field value
// and a boolean to check if the value has been set.
func (o *SharedData) GetSharedDataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharedDataId, true
}

// SetSharedDataId sets field value
func (o *SharedData) SetSharedDataId(v string) {
	o.SharedDataId = v
}

// GetSharedProfileData returns the SharedProfileData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharedData) GetSharedProfileData() NFProfile {
	if o == nil || IsNil(o.SharedProfileData.Get()) {
		var ret NFProfile
		return ret
	}
	return *o.SharedProfileData.Get()
}

// GetSharedProfileDataOk returns a tuple with the SharedProfileData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharedData) GetSharedProfileDataOk() (*NFProfile, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedProfileData.Get(), o.SharedProfileData.IsSet()
}

// HasSharedProfileData returns a boolean if a field has been set.
func (o *SharedData) HasSharedProfileData() bool {
	if o != nil && o.SharedProfileData.IsSet() {
		return true
	}

	return false
}

// SetSharedProfileData gets a reference to the given NullableNFProfile and assigns it to the SharedProfileData field.
func (o *SharedData) SetSharedProfileData(v NFProfile) {
	o.SharedProfileData.Set(&v)
}
// SetSharedProfileDataNil sets the value for SharedProfileData to be an explicit nil
func (o *SharedData) SetSharedProfileDataNil() {
	o.SharedProfileData.Set(nil)
}

// UnsetSharedProfileData ensures that no value is present for SharedProfileData, not even an explicit nil
func (o *SharedData) UnsetSharedProfileData() {
	o.SharedProfileData.Unset()
}

// GetSharedServiceData returns the SharedServiceData field value if set, zero value otherwise.
func (o *SharedData) GetSharedServiceData() NFService {
	if o == nil || IsNil(o.SharedServiceData) {
		var ret NFService
		return ret
	}
	return *o.SharedServiceData
}

// GetSharedServiceDataOk returns a tuple with the SharedServiceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedData) GetSharedServiceDataOk() (*NFService, bool) {
	if o == nil || IsNil(o.SharedServiceData) {
		return nil, false
	}
	return o.SharedServiceData, true
}

// HasSharedServiceData returns a boolean if a field has been set.
func (o *SharedData) HasSharedServiceData() bool {
	if o != nil && !IsNil(o.SharedServiceData) {
		return true
	}

	return false
}

// SetSharedServiceData gets a reference to the given NFService and assigns it to the SharedServiceData field.
func (o *SharedData) SetSharedServiceData(v NFService) {
	o.SharedServiceData = &v
}

// GetAuthorizedWriteScope returns the AuthorizedWriteScope field value if set, zero value otherwise.
func (o *SharedData) GetAuthorizedWriteScope() SharedScope {
	if o == nil || IsNil(o.AuthorizedWriteScope) {
		var ret SharedScope
		return ret
	}
	return *o.AuthorizedWriteScope
}

// GetAuthorizedWriteScopeOk returns a tuple with the AuthorizedWriteScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedData) GetAuthorizedWriteScopeOk() (*SharedScope, bool) {
	if o == nil || IsNil(o.AuthorizedWriteScope) {
		return nil, false
	}
	return o.AuthorizedWriteScope, true
}

// HasAuthorizedWriteScope returns a boolean if a field has been set.
func (o *SharedData) HasAuthorizedWriteScope() bool {
	if o != nil && !IsNil(o.AuthorizedWriteScope) {
		return true
	}

	return false
}

// SetAuthorizedWriteScope gets a reference to the given SharedScope and assigns it to the AuthorizedWriteScope field.
func (o *SharedData) SetAuthorizedWriteScope(v SharedScope) {
	o.AuthorizedWriteScope = &v
}

func (o SharedData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sharedDataId"] = o.SharedDataId
	if o.SharedProfileData.IsSet() {
		toSerialize["sharedProfileData"] = o.SharedProfileData.Get()
	}
	if !IsNil(o.SharedServiceData) {
		toSerialize["sharedServiceData"] = o.SharedServiceData
	}
	if !IsNil(o.AuthorizedWriteScope) {
		toSerialize["authorizedWriteScope"] = o.AuthorizedWriteScope
	}
	return toSerialize, nil
}

func (o *SharedData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sharedDataId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedData := _SharedData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharedData)

	if err != nil {
		return err
	}

	*o = SharedData(varSharedData)

	return err
}

type NullableSharedData struct {
	value *SharedData
	isSet bool
}

func (v NullableSharedData) Get() *SharedData {
	return v.value
}

func (v *NullableSharedData) Set(val *SharedData) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedData) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedData(val *SharedData) *NullableSharedData {
	return &NullableSharedData{value: val, isSet: true}
}

func (v NullableSharedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NrfInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NrfInfo{}

// NrfInfo struct for NrfInfo
type NrfInfo struct {
	ServedUdrInfo *map[string]UdrInfo `json:"servedUdrInfo,omitempty"`
	ServedUdmInfo *map[string]UdmInfo `json:"servedUdmInfo,omitempty"`
	ServedAusfInfo *map[string]AusfInfo `json:"servedAusfInfo,omitempty"`
	ServedAmfInfo *map[string]AmfInfo `json:"servedAmfInfo,omitempty"`
	ServedSmfInfo *map[string]SmfInfo `json:"servedSmfInfo,omitempty"`
	ServedUpfInfo *map[string]UpfInfo `json:"servedUpfInfo,omitempty"`
	ServedPcfInfo *map[string]PcfInfo `json:"servedPcfInfo,omitempty"`
	ServedBsfInfo *map[string]BsfInfo `json:"servedBsfInfo,omitempty"`
	ServedChfInfo *map[string]ChfInfo `json:"servedChfInfo,omitempty"`
	ServedNwdafInfo *map[string]NwdafInfo `json:"servedNwdafInfo,omitempty"`
}

// NewNrfInfo instantiates a new NrfInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNrfInfo() *NrfInfo {
	this := NrfInfo{}
	return &this
}

// NewNrfInfoWithDefaults instantiates a new NrfInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNrfInfoWithDefaults() *NrfInfo {
	this := NrfInfo{}
	return &this
}

// GetServedUdrInfo returns the ServedUdrInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedUdrInfo() map[string]UdrInfo {
	if o == nil || IsNil(o.ServedUdrInfo) {
		var ret map[string]UdrInfo
		return ret
	}
	return *o.ServedUdrInfo
}

// GetServedUdrInfoOk returns a tuple with the ServedUdrInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedUdrInfoOk() (*map[string]UdrInfo, bool) {
	if o == nil || IsNil(o.ServedUdrInfo) {
		return nil, false
	}
	return o.ServedUdrInfo, true
}

// HasServedUdrInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedUdrInfo() bool {
	if o != nil && !IsNil(o.ServedUdrInfo) {
		return true
	}

	return false
}

// SetServedUdrInfo gets a reference to the given map[string]UdrInfo and assigns it to the ServedUdrInfo field.
func (o *NrfInfo) SetServedUdrInfo(v map[string]UdrInfo) {
	o.ServedUdrInfo = &v
}

// GetServedUdmInfo returns the ServedUdmInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedUdmInfo() map[string]UdmInfo {
	if o == nil || IsNil(o.ServedUdmInfo) {
		var ret map[string]UdmInfo
		return ret
	}
	return *o.ServedUdmInfo
}

// GetServedUdmInfoOk returns a tuple with the ServedUdmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedUdmInfoOk() (*map[string]UdmInfo, bool) {
	if o == nil || IsNil(o.ServedUdmInfo) {
		return nil, false
	}
	return o.ServedUdmInfo, true
}

// HasServedUdmInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedUdmInfo() bool {
	if o != nil && !IsNil(o.ServedUdmInfo) {
		return true
	}

	return false
}

// SetServedUdmInfo gets a reference to the given map[string]UdmInfo and assigns it to the ServedUdmInfo field.
func (o *NrfInfo) SetServedUdmInfo(v map[string]UdmInfo) {
	o.ServedUdmInfo = &v
}

// GetServedAusfInfo returns the ServedAusfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedAusfInfo() map[string]AusfInfo {
	if o == nil || IsNil(o.ServedAusfInfo) {
		var ret map[string]AusfInfo
		return ret
	}
	return *o.ServedAusfInfo
}

// GetServedAusfInfoOk returns a tuple with the ServedAusfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedAusfInfoOk() (*map[string]AusfInfo, bool) {
	if o == nil || IsNil(o.ServedAusfInfo) {
		return nil, false
	}
	return o.ServedAusfInfo, true
}

// HasServedAusfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedAusfInfo() bool {
	if o != nil && !IsNil(o.ServedAusfInfo) {
		return true
	}

	return false
}

// SetServedAusfInfo gets a reference to the given map[string]AusfInfo and assigns it to the ServedAusfInfo field.
func (o *NrfInfo) SetServedAusfInfo(v map[string]AusfInfo) {
	o.ServedAusfInfo = &v
}

// GetServedAmfInfo returns the ServedAmfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedAmfInfo() map[string]AmfInfo {
	if o == nil || IsNil(o.ServedAmfInfo) {
		var ret map[string]AmfInfo
		return ret
	}
	return *o.ServedAmfInfo
}

// GetServedAmfInfoOk returns a tuple with the ServedAmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedAmfInfoOk() (*map[string]AmfInfo, bool) {
	if o == nil || IsNil(o.ServedAmfInfo) {
		return nil, false
	}
	return o.ServedAmfInfo, true
}

// HasServedAmfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedAmfInfo() bool {
	if o != nil && !IsNil(o.ServedAmfInfo) {
		return true
	}

	return false
}

// SetServedAmfInfo gets a reference to the given map[string]AmfInfo and assigns it to the ServedAmfInfo field.
func (o *NrfInfo) SetServedAmfInfo(v map[string]AmfInfo) {
	o.ServedAmfInfo = &v
}

// GetServedSmfInfo returns the ServedSmfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedSmfInfo() map[string]SmfInfo {
	if o == nil || IsNil(o.ServedSmfInfo) {
		var ret map[string]SmfInfo
		return ret
	}
	return *o.ServedSmfInfo
}

// GetServedSmfInfoOk returns a tuple with the ServedSmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedSmfInfoOk() (*map[string]SmfInfo, bool) {
	if o == nil || IsNil(o.ServedSmfInfo) {
		return nil, false
	}
	return o.ServedSmfInfo, true
}

// HasServedSmfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedSmfInfo() bool {
	if o != nil && !IsNil(o.ServedSmfInfo) {
		return true
	}

	return false
}

// SetServedSmfInfo gets a reference to the given map[string]SmfInfo and assigns it to the ServedSmfInfo field.
func (o *NrfInfo) SetServedSmfInfo(v map[string]SmfInfo) {
	o.ServedSmfInfo = &v
}

// GetServedUpfInfo returns the ServedUpfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedUpfInfo() map[string]UpfInfo {
	if o == nil || IsNil(o.ServedUpfInfo) {
		var ret map[string]UpfInfo
		return ret
	}
	return *o.ServedUpfInfo
}

// GetServedUpfInfoOk returns a tuple with the ServedUpfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedUpfInfoOk() (*map[string]UpfInfo, bool) {
	if o == nil || IsNil(o.ServedUpfInfo) {
		return nil, false
	}
	return o.ServedUpfInfo, true
}

// HasServedUpfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedUpfInfo() bool {
	if o != nil && !IsNil(o.ServedUpfInfo) {
		return true
	}

	return false
}

// SetServedUpfInfo gets a reference to the given map[string]UpfInfo and assigns it to the ServedUpfInfo field.
func (o *NrfInfo) SetServedUpfInfo(v map[string]UpfInfo) {
	o.ServedUpfInfo = &v
}

// GetServedPcfInfo returns the ServedPcfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedPcfInfo() map[string]PcfInfo {
	if o == nil || IsNil(o.ServedPcfInfo) {
		var ret map[string]PcfInfo
		return ret
	}
	return *o.ServedPcfInfo
}

// GetServedPcfInfoOk returns a tuple with the ServedPcfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedPcfInfoOk() (*map[string]PcfInfo, bool) {
	if o == nil || IsNil(o.ServedPcfInfo) {
		return nil, false
	}
	return o.ServedPcfInfo, true
}

// HasServedPcfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedPcfInfo() bool {
	if o != nil && !IsNil(o.ServedPcfInfo) {
		return true
	}

	return false
}

// SetServedPcfInfo gets a reference to the given map[string]PcfInfo and assigns it to the ServedPcfInfo field.
func (o *NrfInfo) SetServedPcfInfo(v map[string]PcfInfo) {
	o.ServedPcfInfo = &v
}

// GetServedBsfInfo returns the ServedBsfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedBsfInfo() map[string]BsfInfo {
	if o == nil || IsNil(o.ServedBsfInfo) {
		var ret map[string]BsfInfo
		return ret
	}
	return *o.ServedBsfInfo
}

// GetServedBsfInfoOk returns a tuple with the ServedBsfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedBsfInfoOk() (*map[string]BsfInfo, bool) {
	if o == nil || IsNil(o.ServedBsfInfo) {
		return nil, false
	}
	return o.ServedBsfInfo, true
}

// HasServedBsfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedBsfInfo() bool {
	if o != nil && !IsNil(o.ServedBsfInfo) {
		return true
	}

	return false
}

// SetServedBsfInfo gets a reference to the given map[string]BsfInfo and assigns it to the ServedBsfInfo field.
func (o *NrfInfo) SetServedBsfInfo(v map[string]BsfInfo) {
	o.ServedBsfInfo = &v
}

// GetServedChfInfo returns the ServedChfInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedChfInfo() map[string]ChfInfo {
	if o == nil || IsNil(o.ServedChfInfo) {
		var ret map[string]ChfInfo
		return ret
	}
	return *o.ServedChfInfo
}

// GetServedChfInfoOk returns a tuple with the ServedChfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedChfInfoOk() (*map[string]ChfInfo, bool) {
	if o == nil || IsNil(o.ServedChfInfo) {
		return nil, false
	}
	return o.ServedChfInfo, true
}

// HasServedChfInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedChfInfo() bool {
	if o != nil && !IsNil(o.ServedChfInfo) {
		return true
	}

	return false
}

// SetServedChfInfo gets a reference to the given map[string]ChfInfo and assigns it to the ServedChfInfo field.
func (o *NrfInfo) SetServedChfInfo(v map[string]ChfInfo) {
	o.ServedChfInfo = &v
}

// GetServedNwdafInfo returns the ServedNwdafInfo field value if set, zero value otherwise.
func (o *NrfInfo) GetServedNwdafInfo() map[string]NwdafInfo {
	if o == nil || IsNil(o.ServedNwdafInfo) {
		var ret map[string]NwdafInfo
		return ret
	}
	return *o.ServedNwdafInfo
}

// GetServedNwdafInfoOk returns a tuple with the ServedNwdafInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NrfInfo) GetServedNwdafInfoOk() (*map[string]NwdafInfo, bool) {
	if o == nil || IsNil(o.ServedNwdafInfo) {
		return nil, false
	}
	return o.ServedNwdafInfo, true
}

// HasServedNwdafInfo returns a boolean if a field has been set.
func (o *NrfInfo) HasServedNwdafInfo() bool {
	if o != nil && !IsNil(o.ServedNwdafInfo) {
		return true
	}

	return false
}

// SetServedNwdafInfo gets a reference to the given map[string]NwdafInfo and assigns it to the ServedNwdafInfo field.
func (o *NrfInfo) SetServedNwdafInfo(v map[string]NwdafInfo) {
	o.ServedNwdafInfo = &v
}

func (o NrfInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NrfInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServedUdrInfo) {
		toSerialize["servedUdrInfo"] = o.ServedUdrInfo
	}
	if !IsNil(o.ServedUdmInfo) {
		toSerialize["servedUdmInfo"] = o.ServedUdmInfo
	}
	if !IsNil(o.ServedAusfInfo) {
		toSerialize["servedAusfInfo"] = o.ServedAusfInfo
	}
	if !IsNil(o.ServedAmfInfo) {
		toSerialize["servedAmfInfo"] = o.ServedAmfInfo
	}
	if !IsNil(o.ServedSmfInfo) {
		toSerialize["servedSmfInfo"] = o.ServedSmfInfo
	}
	if !IsNil(o.ServedUpfInfo) {
		toSerialize["servedUpfInfo"] = o.ServedUpfInfo
	}
	if !IsNil(o.ServedPcfInfo) {
		toSerialize["servedPcfInfo"] = o.ServedPcfInfo
	}
	if !IsNil(o.ServedBsfInfo) {
		toSerialize["servedBsfInfo"] = o.ServedBsfInfo
	}
	if !IsNil(o.ServedChfInfo) {
		toSerialize["servedChfInfo"] = o.ServedChfInfo
	}
	if !IsNil(o.ServedNwdafInfo) {
		toSerialize["servedNwdafInfo"] = o.ServedNwdafInfo
	}
	return toSerialize, nil
}

type NullableNrfInfo struct {
	value *NrfInfo
	isSet bool
}

func (v NullableNrfInfo) Get() *NrfInfo {
	return v.value
}

func (v *NullableNrfInfo) Set(val *NrfInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNrfInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNrfInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNrfInfo(val *NrfInfo) *NullableNrfInfo {
	return &NullableNrfInfo{value: val, isSet: true}
}

func (v NullableNrfInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNrfInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



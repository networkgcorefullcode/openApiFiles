/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotificationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationData{}

// NotificationData struct for NotificationData
type NotificationData struct {
	Event NotificationEventType `json:"event"`
	NfInstanceUri string `json:"nfInstanceUri"`
	NfProfile *NFProfile `json:"nfProfile,omitempty"`
	ProfileChanges []ChangeItem `json:"profileChanges,omitempty"`
}

type _NotificationData NotificationData

// NewNotificationData instantiates a new NotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationData(event NotificationEventType, nfInstanceUri string) *NotificationData {
	this := NotificationData{}
	return &this
}

// NewNotificationDataWithDefaults instantiates a new NotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDataWithDefaults() *NotificationData {
	this := NotificationData{}
	return &this
}

// GetEvent returns the Event field value
func (o *NotificationData) GetEvent() NotificationEventType {
	if o == nil {
		var ret NotificationEventType
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetEventOk() (*NotificationEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NotificationData) SetEvent(v NotificationEventType) {
	o.Event = v
}

// GetNfInstanceUri returns the NfInstanceUri field value
func (o *NotificationData) GetNfInstanceUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NfInstanceUri
}

// GetNfInstanceUriOk returns a tuple with the NfInstanceUri field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetNfInstanceUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfInstanceUri, true
}

// SetNfInstanceUri sets field value
func (o *NotificationData) SetNfInstanceUri(v string) {
	o.NfInstanceUri = v
}

// GetNfProfile returns the NfProfile field value if set, zero value otherwise.
func (o *NotificationData) GetNfProfile() NFProfile {
	if o == nil || IsNil(o.NfProfile) {
		var ret NFProfile
		return ret
	}
	return *o.NfProfile
}

// GetNfProfileOk returns a tuple with the NfProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationData) GetNfProfileOk() (*NFProfile, bool) {
	if o == nil || IsNil(o.NfProfile) {
		return nil, false
	}
	return o.NfProfile, true
}

// HasNfProfile returns a boolean if a field has been set.
func (o *NotificationData) HasNfProfile() bool {
	if o != nil && !IsNil(o.NfProfile) {
		return true
	}

	return false
}

// SetNfProfile gets a reference to the given NFProfile and assigns it to the NfProfile field.
func (o *NotificationData) SetNfProfile(v NFProfile) {
	o.NfProfile = &v
}

// GetProfileChanges returns the ProfileChanges field value if set, zero value otherwise.
func (o *NotificationData) GetProfileChanges() []ChangeItem {
	if o == nil || IsNil(o.ProfileChanges) {
		var ret []ChangeItem
		return ret
	}
	return o.ProfileChanges
}

// GetProfileChangesOk returns a tuple with the ProfileChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationData) GetProfileChangesOk() ([]ChangeItem, bool) {
	if o == nil || IsNil(o.ProfileChanges) {
		return nil, false
	}
	return o.ProfileChanges, true
}

// HasProfileChanges returns a boolean if a field has been set.
func (o *NotificationData) HasProfileChanges() bool {
	if o != nil && !IsNil(o.ProfileChanges) {
		return true
	}

	return false
}

// SetProfileChanges gets a reference to the given []ChangeItem and assigns it to the ProfileChanges field.
func (o *NotificationData) SetProfileChanges(v []ChangeItem) {
	o.ProfileChanges = v
}

func (o NotificationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["nfInstanceUri"] = o.NfInstanceUri
	if !IsNil(o.NfProfile) {
		toSerialize["nfProfile"] = o.NfProfile
	}
	if !IsNil(o.ProfileChanges) {
		toSerialize["profileChanges"] = o.ProfileChanges
	}
	return toSerialize, nil
}

func (o *NotificationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
		"nfInstanceUri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationData := _NotificationData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationData)

	if err != nil {
		return err
	}

	*o = NotificationData(varNotificationData)

	return err
}

type NullableNotificationData struct {
	value *NotificationData
	isSet bool
}

func (v NullableNotificationData) Get() *NotificationData {
	return v.value
}

func (v *NullableNotificationData) Set(val *NotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationData(val *NotificationData) *NullableNotificationData {
	return &NullableNotificationData{value: val, isSet: true}
}

func (v NullableNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



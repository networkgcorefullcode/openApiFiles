/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubscriptionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionData{}

// SubscriptionData struct for SubscriptionData
type SubscriptionData struct {
	NfStatusNotificationUri string `json:"nfStatusNotificationUri"`
	ReqNfInstanceId *string `json:"reqNfInstanceId,omitempty"`
	SubscrCond *SubscriptionDataSubscrCond `json:"subscrCond,omitempty"`
	SubscriptionId string `json:"subscriptionId"`
	ValidityTime *time.Time `json:"validityTime,omitempty"`
	ReqNotifEvents []NotificationEventType `json:"reqNotifEvents,omitempty"`
	PlmnId *PlmnId `json:"plmnId,omitempty"`
	NotifCondition *NotifCondition `json:"notifCondition,omitempty"`
	ReqNfType *NFType `json:"reqNfType,omitempty"`
	ReqNfFqdn *string `json:"reqNfFqdn,omitempty"`
	ReqSnssais []Snssai `json:"reqSnssais,omitempty"`
}

type _SubscriptionData SubscriptionData

// NewSubscriptionData instantiates a new SubscriptionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionData(nfStatusNotificationUri string, subscriptionId string) *SubscriptionData {
	this := SubscriptionData{}
	this.NfStatusNotificationUri = nfStatusNotificationUri
	this.SubscriptionId = subscriptionId
	return &this
}

// NewSubscriptionDataWithDefaults instantiates a new SubscriptionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionDataWithDefaults() *SubscriptionData {
	this := SubscriptionData{}
	return &this
}

// GetNfStatusNotificationUri returns the NfStatusNotificationUri field value
func (o *SubscriptionData) GetNfStatusNotificationUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NfStatusNotificationUri
}

// GetNfStatusNotificationUriOk returns a tuple with the NfStatusNotificationUri field value
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetNfStatusNotificationUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfStatusNotificationUri, true
}

// SetNfStatusNotificationUri sets field value
func (o *SubscriptionData) SetNfStatusNotificationUri(v string) {
	o.NfStatusNotificationUri = v
}

// GetReqNfInstanceId returns the ReqNfInstanceId field value if set, zero value otherwise.
func (o *SubscriptionData) GetReqNfInstanceId() string {
	if o == nil || IsNil(o.ReqNfInstanceId) {
		var ret string
		return ret
	}
	return *o.ReqNfInstanceId
}

// GetReqNfInstanceIdOk returns a tuple with the ReqNfInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetReqNfInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReqNfInstanceId) {
		return nil, false
	}
	return o.ReqNfInstanceId, true
}

// HasReqNfInstanceId returns a boolean if a field has been set.
func (o *SubscriptionData) HasReqNfInstanceId() bool {
	if o != nil && !IsNil(o.ReqNfInstanceId) {
		return true
	}

	return false
}

// SetReqNfInstanceId gets a reference to the given string and assigns it to the ReqNfInstanceId field.
func (o *SubscriptionData) SetReqNfInstanceId(v string) {
	o.ReqNfInstanceId = &v
}

// GetSubscrCond returns the SubscrCond field value if set, zero value otherwise.
func (o *SubscriptionData) GetSubscrCond() SubscriptionDataSubscrCond {
	if o == nil || IsNil(o.SubscrCond) {
		var ret SubscriptionDataSubscrCond
		return ret
	}
	return *o.SubscrCond
}

// GetSubscrCondOk returns a tuple with the SubscrCond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetSubscrCondOk() (*SubscriptionDataSubscrCond, bool) {
	if o == nil || IsNil(o.SubscrCond) {
		return nil, false
	}
	return o.SubscrCond, true
}

// HasSubscrCond returns a boolean if a field has been set.
func (o *SubscriptionData) HasSubscrCond() bool {
	if o != nil && !IsNil(o.SubscrCond) {
		return true
	}

	return false
}

// SetSubscrCond gets a reference to the given SubscriptionDataSubscrCond and assigns it to the SubscrCond field.
func (o *SubscriptionData) SetSubscrCond(v SubscriptionDataSubscrCond) {
	o.SubscrCond = &v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *SubscriptionData) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *SubscriptionData) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetValidityTime returns the ValidityTime field value if set, zero value otherwise.
func (o *SubscriptionData) GetValidityTime() time.Time {
	if o == nil || IsNil(o.ValidityTime) {
		var ret time.Time
		return ret
	}
	return *o.ValidityTime
}

// GetValidityTimeOk returns a tuple with the ValidityTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetValidityTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidityTime) {
		return nil, false
	}
	return o.ValidityTime, true
}

// HasValidityTime returns a boolean if a field has been set.
func (o *SubscriptionData) HasValidityTime() bool {
	if o != nil && !IsNil(o.ValidityTime) {
		return true
	}

	return false
}

// SetValidityTime gets a reference to the given time.Time and assigns it to the ValidityTime field.
func (o *SubscriptionData) SetValidityTime(v time.Time) {
	o.ValidityTime = &v
}

// GetReqNotifEvents returns the ReqNotifEvents field value if set, zero value otherwise.
func (o *SubscriptionData) GetReqNotifEvents() []NotificationEventType {
	if o == nil || IsNil(o.ReqNotifEvents) {
		var ret []NotificationEventType
		return ret
	}
	return o.ReqNotifEvents
}

// GetReqNotifEventsOk returns a tuple with the ReqNotifEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetReqNotifEventsOk() ([]NotificationEventType, bool) {
	if o == nil || IsNil(o.ReqNotifEvents) {
		return nil, false
	}
	return o.ReqNotifEvents, true
}

// HasReqNotifEvents returns a boolean if a field has been set.
func (o *SubscriptionData) HasReqNotifEvents() bool {
	if o != nil && !IsNil(o.ReqNotifEvents) {
		return true
	}

	return false
}

// SetReqNotifEvents gets a reference to the given []NotificationEventType and assigns it to the ReqNotifEvents field.
func (o *SubscriptionData) SetReqNotifEvents(v []NotificationEventType) {
	o.ReqNotifEvents = v
}

// GetPlmnId returns the PlmnId field value if set, zero value otherwise.
func (o *SubscriptionData) GetPlmnId() PlmnId {
	if o == nil || IsNil(o.PlmnId) {
		var ret PlmnId
		return ret
	}
	return *o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.PlmnId) {
		return nil, false
	}
	return o.PlmnId, true
}

// HasPlmnId returns a boolean if a field has been set.
func (o *SubscriptionData) HasPlmnId() bool {
	if o != nil && !IsNil(o.PlmnId) {
		return true
	}

	return false
}

// SetPlmnId gets a reference to the given PlmnId and assigns it to the PlmnId field.
func (o *SubscriptionData) SetPlmnId(v PlmnId) {
	o.PlmnId = &v
}

// GetNotifCondition returns the NotifCondition field value if set, zero value otherwise.
func (o *SubscriptionData) GetNotifCondition() NotifCondition {
	if o == nil || IsNil(o.NotifCondition) {
		var ret NotifCondition
		return ret
	}
	return *o.NotifCondition
}

// GetNotifConditionOk returns a tuple with the NotifCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetNotifConditionOk() (*NotifCondition, bool) {
	if o == nil || IsNil(o.NotifCondition) {
		return nil, false
	}
	return o.NotifCondition, true
}

// HasNotifCondition returns a boolean if a field has been set.
func (o *SubscriptionData) HasNotifCondition() bool {
	if o != nil && !IsNil(o.NotifCondition) {
		return true
	}

	return false
}

// SetNotifCondition gets a reference to the given NotifCondition and assigns it to the NotifCondition field.
func (o *SubscriptionData) SetNotifCondition(v NotifCondition) {
	o.NotifCondition = &v
}

// GetReqNfType returns the ReqNfType field value if set, zero value otherwise.
func (o *SubscriptionData) GetReqNfType() NFType {
	if o == nil || IsNil(o.ReqNfType) {
		var ret NFType
		return ret
	}
	return *o.ReqNfType
}

// GetReqNfTypeOk returns a tuple with the ReqNfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetReqNfTypeOk() (*NFType, bool) {
	if o == nil || IsNil(o.ReqNfType) {
		return nil, false
	}
	return o.ReqNfType, true
}

// HasReqNfType returns a boolean if a field has been set.
func (o *SubscriptionData) HasReqNfType() bool {
	if o != nil && !IsNil(o.ReqNfType) {
		return true
	}

	return false
}

// SetReqNfType gets a reference to the given NFType and assigns it to the ReqNfType field.
func (o *SubscriptionData) SetReqNfType(v NFType) {
	o.ReqNfType = &v
}

// GetReqNfFqdn returns the ReqNfFqdn field value if set, zero value otherwise.
func (o *SubscriptionData) GetReqNfFqdn() string {
	if o == nil || IsNil(o.ReqNfFqdn) {
		var ret string
		return ret
	}
	return *o.ReqNfFqdn
}

// GetReqNfFqdnOk returns a tuple with the ReqNfFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetReqNfFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ReqNfFqdn) {
		return nil, false
	}
	return o.ReqNfFqdn, true
}

// HasReqNfFqdn returns a boolean if a field has been set.
func (o *SubscriptionData) HasReqNfFqdn() bool {
	if o != nil && !IsNil(o.ReqNfFqdn) {
		return true
	}

	return false
}

// SetReqNfFqdn gets a reference to the given string and assigns it to the ReqNfFqdn field.
func (o *SubscriptionData) SetReqNfFqdn(v string) {
	o.ReqNfFqdn = &v
}

// GetReqSnssais returns the ReqSnssais field value if set, zero value otherwise.
func (o *SubscriptionData) GetReqSnssais() []Snssai {
	if o == nil || IsNil(o.ReqSnssais) {
		var ret []Snssai
		return ret
	}
	return o.ReqSnssais
}

// GetReqSnssaisOk returns a tuple with the ReqSnssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionData) GetReqSnssaisOk() ([]Snssai, bool) {
	if o == nil || IsNil(o.ReqSnssais) {
		return nil, false
	}
	return o.ReqSnssais, true
}

// HasReqSnssais returns a boolean if a field has been set.
func (o *SubscriptionData) HasReqSnssais() bool {
	if o != nil && !IsNil(o.ReqSnssais) {
		return true
	}

	return false
}

// SetReqSnssais gets a reference to the given []Snssai and assigns it to the ReqSnssais field.
func (o *SubscriptionData) SetReqSnssais(v []Snssai) {
	o.ReqSnssais = v
}

func (o SubscriptionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nfStatusNotificationUri"] = o.NfStatusNotificationUri
	if !IsNil(o.ReqNfInstanceId) {
		toSerialize["reqNfInstanceId"] = o.ReqNfInstanceId
	}
	if !IsNil(o.SubscrCond) {
		toSerialize["subscrCond"] = o.SubscrCond
	}
	toSerialize["subscriptionId"] = o.SubscriptionId
	if !IsNil(o.ValidityTime) {
		toSerialize["validityTime"] = o.ValidityTime
	}
	if !IsNil(o.ReqNotifEvents) {
		toSerialize["reqNotifEvents"] = o.ReqNotifEvents
	}
	if !IsNil(o.PlmnId) {
		toSerialize["plmnId"] = o.PlmnId
	}
	if !IsNil(o.NotifCondition) {
		toSerialize["notifCondition"] = o.NotifCondition
	}
	if !IsNil(o.ReqNfType) {
		toSerialize["reqNfType"] = o.ReqNfType
	}
	if !IsNil(o.ReqNfFqdn) {
		toSerialize["reqNfFqdn"] = o.ReqNfFqdn
	}
	if !IsNil(o.ReqSnssais) {
		toSerialize["reqSnssais"] = o.ReqSnssais
	}
	return toSerialize, nil
}

func (o *SubscriptionData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nfStatusNotificationUri",
		"subscriptionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionData := _SubscriptionData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionData)

	if err != nil {
		return err
	}

	*o = SubscriptionData(varSubscriptionData)

	return err
}

type NullableSubscriptionData struct {
	value *SubscriptionData
	isSet bool
}

func (v NullableSubscriptionData) Get() *SubscriptionData {
	return v.value
}

func (v *NullableSubscriptionData) Set(val *SubscriptionData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionData(val *SubscriptionData) *NullableSubscriptionData {
	return &NullableSubscriptionData{value: val, isSet: true}
}

func (v NullableSubscriptionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



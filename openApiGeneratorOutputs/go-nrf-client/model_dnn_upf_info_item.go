/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DnnUpfInfoItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnnUpfInfoItem{}

// DnnUpfInfoItem struct for DnnUpfInfoItem
type DnnUpfInfoItem struct {
	Dnn string `json:"dnn"`
	DnaiList []string `json:"dnaiList,omitempty"`
	PduSessionTypes []PduSessionType `json:"pduSessionTypes,omitempty"`
}

type _DnnUpfInfoItem DnnUpfInfoItem

// NewDnnUpfInfoItem instantiates a new DnnUpfInfoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnnUpfInfoItem(dnn string) *DnnUpfInfoItem {
	this := DnnUpfInfoItem{}
	this.Dnn = dnn
	return &this
}

// NewDnnUpfInfoItemWithDefaults instantiates a new DnnUpfInfoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnnUpfInfoItemWithDefaults() *DnnUpfInfoItem {
	this := DnnUpfInfoItem{}
	return &this
}

// GetDnn returns the Dnn field value
func (o *DnnUpfInfoItem) GetDnn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value
// and a boolean to check if the value has been set.
func (o *DnnUpfInfoItem) GetDnnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dnn, true
}

// SetDnn sets field value
func (o *DnnUpfInfoItem) SetDnn(v string) {
	o.Dnn = v
}

// GetDnaiList returns the DnaiList field value if set, zero value otherwise.
func (o *DnnUpfInfoItem) GetDnaiList() []string {
	if o == nil || IsNil(o.DnaiList) {
		var ret []string
		return ret
	}
	return o.DnaiList
}

// GetDnaiListOk returns a tuple with the DnaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnnUpfInfoItem) GetDnaiListOk() ([]string, bool) {
	if o == nil || IsNil(o.DnaiList) {
		return nil, false
	}
	return o.DnaiList, true
}

// HasDnaiList returns a boolean if a field has been set.
func (o *DnnUpfInfoItem) HasDnaiList() bool {
	if o != nil && !IsNil(o.DnaiList) {
		return true
	}

	return false
}

// SetDnaiList gets a reference to the given []string and assigns it to the DnaiList field.
func (o *DnnUpfInfoItem) SetDnaiList(v []string) {
	o.DnaiList = v
}

// GetPduSessionTypes returns the PduSessionTypes field value if set, zero value otherwise.
func (o *DnnUpfInfoItem) GetPduSessionTypes() []PduSessionType {
	if o == nil || IsNil(o.PduSessionTypes) {
		var ret []PduSessionType
		return ret
	}
	return o.PduSessionTypes
}

// GetPduSessionTypesOk returns a tuple with the PduSessionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnnUpfInfoItem) GetPduSessionTypesOk() ([]PduSessionType, bool) {
	if o == nil || IsNil(o.PduSessionTypes) {
		return nil, false
	}
	return o.PduSessionTypes, true
}

// HasPduSessionTypes returns a boolean if a field has been set.
func (o *DnnUpfInfoItem) HasPduSessionTypes() bool {
	if o != nil && !IsNil(o.PduSessionTypes) {
		return true
	}

	return false
}

// SetPduSessionTypes gets a reference to the given []PduSessionType and assigns it to the PduSessionTypes field.
func (o *DnnUpfInfoItem) SetPduSessionTypes(v []PduSessionType) {
	o.PduSessionTypes = v
}

func (o DnnUpfInfoItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnnUpfInfoItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnn"] = o.Dnn
	if !IsNil(o.DnaiList) {
		toSerialize["dnaiList"] = o.DnaiList
	}
	if !IsNil(o.PduSessionTypes) {
		toSerialize["pduSessionTypes"] = o.PduSessionTypes
	}
	return toSerialize, nil
}

func (o *DnnUpfInfoItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dnn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnnUpfInfoItem := _DnnUpfInfoItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnnUpfInfoItem)

	if err != nil {
		return err
	}

	*o = DnnUpfInfoItem(varDnnUpfInfoItem)

	return err
}

type NullableDnnUpfInfoItem struct {
	value *DnnUpfInfoItem
	isSet bool
}

func (v NullableDnnUpfInfoItem) Get() *DnnUpfInfoItem {
	return v.value
}

func (v *NullableDnnUpfInfoItem) Set(val *DnnUpfInfoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDnnUpfInfoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDnnUpfInfoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnnUpfInfoItem(val *DnnUpfInfoItem) *NullableDnnUpfInfoItem {
	return &NullableDnnUpfInfoItem{value: val, isSet: true}
}

func (v NullableDnnUpfInfoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnnUpfInfoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



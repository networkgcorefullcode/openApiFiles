/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BsfInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BsfInfo{}

// BsfInfo struct for BsfInfo
type BsfInfo struct {
	DnnList []string `json:"dnnList,omitempty"`
	IpDomainList []string `json:"ipDomainList,omitempty"`
	Ipv4AddressRanges []Ipv4AddressRange `json:"ipv4AddressRanges,omitempty"`
	Ipv6PrefixRanges []Ipv6PrefixRange `json:"ipv6PrefixRanges,omitempty"`
}

// NewBsfInfo instantiates a new BsfInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBsfInfo() *BsfInfo {
	this := BsfInfo{}
	return &this
}

// NewBsfInfoWithDefaults instantiates a new BsfInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBsfInfoWithDefaults() *BsfInfo {
	this := BsfInfo{}
	return &this
}

// GetDnnList returns the DnnList field value if set, zero value otherwise.
func (o *BsfInfo) GetDnnList() []string {
	if o == nil || IsNil(o.DnnList) {
		var ret []string
		return ret
	}
	return o.DnnList
}

// GetDnnListOk returns a tuple with the DnnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetDnnListOk() ([]string, bool) {
	if o == nil || IsNil(o.DnnList) {
		return nil, false
	}
	return o.DnnList, true
}

// HasDnnList returns a boolean if a field has been set.
func (o *BsfInfo) HasDnnList() bool {
	if o != nil && !IsNil(o.DnnList) {
		return true
	}

	return false
}

// SetDnnList gets a reference to the given []string and assigns it to the DnnList field.
func (o *BsfInfo) SetDnnList(v []string) {
	o.DnnList = v
}

// GetIpDomainList returns the IpDomainList field value if set, zero value otherwise.
func (o *BsfInfo) GetIpDomainList() []string {
	if o == nil || IsNil(o.IpDomainList) {
		var ret []string
		return ret
	}
	return o.IpDomainList
}

// GetIpDomainListOk returns a tuple with the IpDomainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetIpDomainListOk() ([]string, bool) {
	if o == nil || IsNil(o.IpDomainList) {
		return nil, false
	}
	return o.IpDomainList, true
}

// HasIpDomainList returns a boolean if a field has been set.
func (o *BsfInfo) HasIpDomainList() bool {
	if o != nil && !IsNil(o.IpDomainList) {
		return true
	}

	return false
}

// SetIpDomainList gets a reference to the given []string and assigns it to the IpDomainList field.
func (o *BsfInfo) SetIpDomainList(v []string) {
	o.IpDomainList = v
}

// GetIpv4AddressRanges returns the Ipv4AddressRanges field value if set, zero value otherwise.
func (o *BsfInfo) GetIpv4AddressRanges() []Ipv4AddressRange {
	if o == nil || IsNil(o.Ipv4AddressRanges) {
		var ret []Ipv4AddressRange
		return ret
	}
	return o.Ipv4AddressRanges
}

// GetIpv4AddressRangesOk returns a tuple with the Ipv4AddressRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetIpv4AddressRangesOk() ([]Ipv4AddressRange, bool) {
	if o == nil || IsNil(o.Ipv4AddressRanges) {
		return nil, false
	}
	return o.Ipv4AddressRanges, true
}

// HasIpv4AddressRanges returns a boolean if a field has been set.
func (o *BsfInfo) HasIpv4AddressRanges() bool {
	if o != nil && !IsNil(o.Ipv4AddressRanges) {
		return true
	}

	return false
}

// SetIpv4AddressRanges gets a reference to the given []Ipv4AddressRange and assigns it to the Ipv4AddressRanges field.
func (o *BsfInfo) SetIpv4AddressRanges(v []Ipv4AddressRange) {
	o.Ipv4AddressRanges = v
}

// GetIpv6PrefixRanges returns the Ipv6PrefixRanges field value if set, zero value otherwise.
func (o *BsfInfo) GetIpv6PrefixRanges() []Ipv6PrefixRange {
	if o == nil || IsNil(o.Ipv6PrefixRanges) {
		var ret []Ipv6PrefixRange
		return ret
	}
	return o.Ipv6PrefixRanges
}

// GetIpv6PrefixRangesOk returns a tuple with the Ipv6PrefixRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetIpv6PrefixRangesOk() ([]Ipv6PrefixRange, bool) {
	if o == nil || IsNil(o.Ipv6PrefixRanges) {
		return nil, false
	}
	return o.Ipv6PrefixRanges, true
}

// HasIpv6PrefixRanges returns a boolean if a field has been set.
func (o *BsfInfo) HasIpv6PrefixRanges() bool {
	if o != nil && !IsNil(o.Ipv6PrefixRanges) {
		return true
	}

	return false
}

// SetIpv6PrefixRanges gets a reference to the given []Ipv6PrefixRange and assigns it to the Ipv6PrefixRanges field.
func (o *BsfInfo) SetIpv6PrefixRanges(v []Ipv6PrefixRange) {
	o.Ipv6PrefixRanges = v
}

func (o BsfInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BsfInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnnList) {
		toSerialize["dnnList"] = o.DnnList
	}
	if !IsNil(o.IpDomainList) {
		toSerialize["ipDomainList"] = o.IpDomainList
	}
	if !IsNil(o.Ipv4AddressRanges) {
		toSerialize["ipv4AddressRanges"] = o.Ipv4AddressRanges
	}
	if !IsNil(o.Ipv6PrefixRanges) {
		toSerialize["ipv6PrefixRanges"] = o.Ipv6PrefixRanges
	}
	return toSerialize, nil
}

type NullableBsfInfo struct {
	value *BsfInfo
	isSet bool
}

func (v NullableBsfInfo) Get() *BsfInfo {
	return v.value
}

func (v *NullableBsfInfo) Set(val *BsfInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBsfInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBsfInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBsfInfo(val *BsfInfo) *NullableBsfInfo {
	return &NullableBsfInfo{value: val, isSet: true}
}

func (v NullableBsfInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBsfInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



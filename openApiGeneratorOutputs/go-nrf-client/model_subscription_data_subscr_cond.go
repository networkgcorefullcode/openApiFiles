/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0.alpha-1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SubscriptionDataSubscrCond - struct for SubscriptionDataSubscrCond
type SubscriptionDataSubscrCond struct {
	AmfCond *AmfCond
	GuamiListCond *GuamiListCond
	NetworkSliceCond *NetworkSliceCond
	NfGroupCond *NfGroupCond
	NfInstanceIdCond *NfInstanceIdCond
	NfTypeCond *NfTypeCond
	ServiceNameCond *ServiceNameCond
}

// AmfCondAsSubscriptionDataSubscrCond is a convenience function that returns AmfCond wrapped in SubscriptionDataSubscrCond
func AmfCondAsSubscriptionDataSubscrCond(v *AmfCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		AmfCond: v,
	}
}

// GuamiListCondAsSubscriptionDataSubscrCond is a convenience function that returns GuamiListCond wrapped in SubscriptionDataSubscrCond
func GuamiListCondAsSubscriptionDataSubscrCond(v *GuamiListCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		GuamiListCond: v,
	}
}

// NetworkSliceCondAsSubscriptionDataSubscrCond is a convenience function that returns NetworkSliceCond wrapped in SubscriptionDataSubscrCond
func NetworkSliceCondAsSubscriptionDataSubscrCond(v *NetworkSliceCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		NetworkSliceCond: v,
	}
}

// NfGroupCondAsSubscriptionDataSubscrCond is a convenience function that returns NfGroupCond wrapped in SubscriptionDataSubscrCond
func NfGroupCondAsSubscriptionDataSubscrCond(v *NfGroupCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		NfGroupCond: v,
	}
}

// NfInstanceIdCondAsSubscriptionDataSubscrCond is a convenience function that returns NfInstanceIdCond wrapped in SubscriptionDataSubscrCond
func NfInstanceIdCondAsSubscriptionDataSubscrCond(v *NfInstanceIdCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		NfInstanceIdCond: v,
	}
}

// NfTypeCondAsSubscriptionDataSubscrCond is a convenience function that returns NfTypeCond wrapped in SubscriptionDataSubscrCond
func NfTypeCondAsSubscriptionDataSubscrCond(v *NfTypeCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		NfTypeCond: v,
	}
}

// ServiceNameCondAsSubscriptionDataSubscrCond is a convenience function that returns ServiceNameCond wrapped in SubscriptionDataSubscrCond
func ServiceNameCondAsSubscriptionDataSubscrCond(v *ServiceNameCond) SubscriptionDataSubscrCond {
	return SubscriptionDataSubscrCond{
		ServiceNameCond: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionDataSubscrCond) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmfCond
	err = newStrictDecoder(data).Decode(&dst.AmfCond)
	if err == nil {
		jsonAmfCond, _ := json.Marshal(dst.AmfCond)
		if string(jsonAmfCond) == "{}" { // empty struct
			dst.AmfCond = nil
		} else {
			match++
		}
	} else {
		dst.AmfCond = nil
	}

	// try to unmarshal data into GuamiListCond
	err = newStrictDecoder(data).Decode(&dst.GuamiListCond)
	if err == nil {
		jsonGuamiListCond, _ := json.Marshal(dst.GuamiListCond)
		if string(jsonGuamiListCond) == "{}" { // empty struct
			dst.GuamiListCond = nil
		} else {
			match++
		}
	} else {
		dst.GuamiListCond = nil
	}

	// try to unmarshal data into NetworkSliceCond
	err = newStrictDecoder(data).Decode(&dst.NetworkSliceCond)
	if err == nil {
		jsonNetworkSliceCond, _ := json.Marshal(dst.NetworkSliceCond)
		if string(jsonNetworkSliceCond) == "{}" { // empty struct
			dst.NetworkSliceCond = nil
		} else {
			match++
		}
	} else {
		dst.NetworkSliceCond = nil
	}

	// try to unmarshal data into NfGroupCond
	err = newStrictDecoder(data).Decode(&dst.NfGroupCond)
	if err == nil {
		jsonNfGroupCond, _ := json.Marshal(dst.NfGroupCond)
		if string(jsonNfGroupCond) == "{}" { // empty struct
			dst.NfGroupCond = nil
		} else {
			match++
		}
	} else {
		dst.NfGroupCond = nil
	}

	// try to unmarshal data into NfInstanceIdCond
	err = newStrictDecoder(data).Decode(&dst.NfInstanceIdCond)
	if err == nil {
		jsonNfInstanceIdCond, _ := json.Marshal(dst.NfInstanceIdCond)
		if string(jsonNfInstanceIdCond) == "{}" { // empty struct
			dst.NfInstanceIdCond = nil
		} else {
			match++
		}
	} else {
		dst.NfInstanceIdCond = nil
	}

	// try to unmarshal data into NfTypeCond
	err = newStrictDecoder(data).Decode(&dst.NfTypeCond)
	if err == nil {
		jsonNfTypeCond, _ := json.Marshal(dst.NfTypeCond)
		if string(jsonNfTypeCond) == "{}" { // empty struct
			dst.NfTypeCond = nil
		} else {
			match++
		}
	} else {
		dst.NfTypeCond = nil
	}

	// try to unmarshal data into ServiceNameCond
	err = newStrictDecoder(data).Decode(&dst.ServiceNameCond)
	if err == nil {
		jsonServiceNameCond, _ := json.Marshal(dst.ServiceNameCond)
		if string(jsonServiceNameCond) == "{}" { // empty struct
			dst.ServiceNameCond = nil
		} else {
			match++
		}
	} else {
		dst.ServiceNameCond = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmfCond = nil
		dst.GuamiListCond = nil
		dst.NetworkSliceCond = nil
		dst.NfGroupCond = nil
		dst.NfInstanceIdCond = nil
		dst.NfTypeCond = nil
		dst.ServiceNameCond = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubscriptionDataSubscrCond)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubscriptionDataSubscrCond)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionDataSubscrCond) MarshalJSON() ([]byte, error) {
	if src.AmfCond != nil {
		return json.Marshal(&src.AmfCond)
	}

	if src.GuamiListCond != nil {
		return json.Marshal(&src.GuamiListCond)
	}

	if src.NetworkSliceCond != nil {
		return json.Marshal(&src.NetworkSliceCond)
	}

	if src.NfGroupCond != nil {
		return json.Marshal(&src.NfGroupCond)
	}

	if src.NfInstanceIdCond != nil {
		return json.Marshal(&src.NfInstanceIdCond)
	}

	if src.NfTypeCond != nil {
		return json.Marshal(&src.NfTypeCond)
	}

	if src.ServiceNameCond != nil {
		return json.Marshal(&src.ServiceNameCond)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionDataSubscrCond) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmfCond != nil {
		return obj.AmfCond
	}

	if obj.GuamiListCond != nil {
		return obj.GuamiListCond
	}

	if obj.NetworkSliceCond != nil {
		return obj.NetworkSliceCond
	}

	if obj.NfGroupCond != nil {
		return obj.NfGroupCond
	}

	if obj.NfInstanceIdCond != nil {
		return obj.NfInstanceIdCond
	}

	if obj.NfTypeCond != nil {
		return obj.NfTypeCond
	}

	if obj.ServiceNameCond != nil {
		return obj.ServiceNameCond
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionDataSubscrCond struct {
	value *SubscriptionDataSubscrCond
	isSet bool
}

func (v NullableSubscriptionDataSubscrCond) Get() *SubscriptionDataSubscrCond {
	return v.value
}

func (v *NullableSubscriptionDataSubscrCond) Set(val *SubscriptionDataSubscrCond) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionDataSubscrCond) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionDataSubscrCond) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionDataSubscrCond(val *SubscriptionDataSubscrCond) *NullableSubscriptionDataSubscrCond {
	return &NullableSubscriptionDataSubscrCond{value: val, isSet: true}
}

func (v NullableSubscriptionDataSubscrCond) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionDataSubscrCond) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


